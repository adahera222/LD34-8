<!DOCTYPE HTML>
<!DOCTYPE HTML>
<html>
  <head>
    <script type="text/javascript" src = "js/game.js"></script>
    <script type="text/javascript" src = "js/math2D.js"></script>
    <script type="text/javascript" src = "js/drawing.js"></script>
    <script type="text/javascript" src = "js/colors.js"></script>
    <script type="text/javascript" src = "js/utility.js"></script>
    <script type="text/javascript" src = "js/mouse.js"></script>
    <script type="text/javascript" src = "js/keyboard.js"></script>
    <script type="text/javascript" src = "js/gameobject.js"></script>
    <script type="text/javascript" src = "js/field.js"></script>
    <title>New Game</title>
  </head>
  
  <body>
    <canvas id="game_canvas" style="border:1px solid black; position: absolute; left:0; top:0;"></canvas>
  </body>
  
  
  <script type="text/javascript" src="tracks.js"></script>
  <script type="text/javascript" src="trains.js"></script>
  <script type="text/javascript">
    // The game
    var game = new Game({bg_color:'#0a492c'});
    game.setTitle("Loops!");
    game.setSize(xy(800, 600));
    window.onload = function() {
      game.bringToFront('circular');
      game.bringToFront('train');
      game.start();
    }
    
    game.bringToFront = function(type) {
      // loop backwards so we don't skip items
      for (var i = this.objects.length - 1; i >= 0; i--) {
        if (!this.objects[i].type || this.objects[i].type !== type) continue;
        this.objects.push(this.objects.splice(i, 1)[0]);
      }
    }
    
    game.next_track = 0;
    game.tracks = [];
    
    
    // SETTINGS
    // Display constants
    game.display.track_width = 8; // px
    game.display.track_color = 'white';
    game.display.train_radius = 12; // px
    game.display.darkened_track_extent = 0.4;
    
    // Other constants
    game.train_speed = 3; // pixels per frame. TODO: convert to pixels per second
    game.joint_click_radius = 20; // radius of area in which you can click the joining of two tracks
    
    
    // TESTS
    
    var test_track1 = makeCircleTrack(xy(200, 290), 70);
    var test_track2 = makeCircleTrack(xy(400, 260), 100);
    var test_track3 = makeCircleTrack(xy(460, 70), 30);
    var test_track4 = makeCircleTrack(xy(660, 150), 50);
    var test_track12 = makeLinearTrack(test_track2, 0.25, 1, test_track1, 0.25, -1);
    var test_track23 = makeLinearTrack(test_track2, 0.94, -1, test_track3, 0.45, -1);
    //var test_track34 = makeLinearTrack(test_track3, 0.8, 1, test_track4, 0.8, -1);
    
    test_track2.connections[test_track23.id] = true;
    test_track3.connections[test_track23.id] = true;
    //test_track3.connections[test_track34.id] = true;
    //test_track4.connections[test_track34.id] = true;
    
    var test_train1 = makeTrain('darkred', test_track1);
    var test_train2 = makeTrain('darkblue', test_track2);
    test_train1.dir = -1;
    
    // Computed tangent track
    var t1 = test_track3;
    var t2 = test_track4;
    var pts = getOuterTangents(t1, t2)
    var test_track34 = makeLinearTrack(t1, pts[0][0], 1, t2, pts[0][1], -1);
    
    game.ontick(function() {
      text(game.ctx, "Try clicking here-ish ^", xy(200, 375), 'ne', 'white')
      text(game.ctx, "^ and/or here", xy(405, 375), 'nw', 'white')
    })
    
  </script>
</html>
